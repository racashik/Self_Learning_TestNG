// Listener is like a security guard who will follow the instuction which will be addressed
// There are so many "I Test Listener" we have

/* 

onFinish(ITestContext context) : Invoked after all the test methods belonging to the classes inside the <test> tag have run and all their Configuration methods have been called.

onStart(ITestContext context) : Invoked before running all the test methods belonging to the classes inside the <test> tag and calling all their Configuration methods.

onTestFailedButWithinSuccessPercentage(ITestResult result) : Invoked each time a method fails but has been annotated with successPercentage and this failure still keeps it within the success percentage requested.

onTestFailedWithTimeout(ITestResult result) : Invoked each time a test fails due to a timeout.

onTestFailure(ITestResult result) : Invoked each time a test fails.

onTestSkipped(ITestResult result) : Invoked each time a test is skipped.

onTestStart(ITestResult result) : Invoked each time before a test will be invoked.

onTestSuccess(ITestResult result) : Invoked each time a test succeeds.


*/ 



// Create a class where we will keep the Test code, which is following 


package Listener;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import io.github.bonigarcia.wdm.WebDriverManager;


// ****************  Here adding the "Listener Annotation" with the "Listener Class name + .class" for allowing to work here ********

@Listeners(ListenerCode.class)
public class TestCode {

	WebDriver driver;

	@Test
	public void Test1() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.get("https://javadoc.io/doc/org.testng/testng/latest/org/testng/ITestListener.html");
		Assert.assertEquals(driver.getTitle(), "ITestListener - testng 7.10.2 javadoc");

		driver.quit();
	}

}





// Create a class where we will keep the "Listener" code, which is following 



package Listener;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;


// Here have to "implements the ITestListener" library
// All the ITestListener methods are available in the "ITestListener" library and below inside our class, we will "Override" those

public class ListenerCode implements ITestListener {
	
	
	// We acn directly get the methods name from google search or from the "Source"	
	// To get from the "Source", right click & go to " Source --> Override/Implements Methods " and select which methods we need

	@Override
	public void onTestStart(ITestResult result) {
		System.out.println(" Starting the Test: " + result.getName());
	}

	@Override
	public void onTestSuccess(ITestResult result) {
		System.out.println("Get Test Success: " + result.getName());
	}

	@Override
	public void onStart(ITestContext context) {

		System.out.println("Starting the Test Code: " + context.getName());
	}

}




// We can run the Test code with Listener through the XML file
// Convert the "TestCode" File into "TestNG" by "TestNG --> Convert to TestNG", it will generate the "XML" File 
// Use the following XML code


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">

	<listeners>

		// ***** Here Class-name is "Package name . Listener code Class name" *************

		<listener class-name="Listener.ListenerCode"></listener>

	</listeners>


  <test thread-count="5" name="Test">
    <classes>
      <class name="Listener.TestCode"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->

















