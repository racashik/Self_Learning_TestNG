// For insrting data from the Excel file, need to add a libary called "Apache POI API Based On OPC and OOXML Schemas" to the "pom.xml" file as dependency
// There has many libary for "POI" have to use "poi-ooxml" one



// ****************** Following code we will use for calling data from the excel file ********************
// Need to fix our Package name, class name, Excel folder path, Sheet name when directly using the code 

package DataDriven;

import java.io.IOException;
import java.time.LocalDateTime;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.testng.annotations.DataProvider;

public class UserDataProvider {
	
	private static XSSFWorkbook workbook;
	private static XSSFSheet sheet;

	// ********** Here have to change the exact excel file path and Sheet name **************
	
	private static String file = "D:/New folder/UserDataSet.xlsx";
	private static String sheetName = "Users";
	
	@DataProvider(name="userData")
	public static Object[][] userDataSet() {
		String file = "D:/New folder/UserDataSet.xlsx";
		UserDataProvider udp = new UserDataProvider(file);

		// ******** Here can fix the column and Row number or can make it dynamic by using the comment code "(udp.getRowCount(sheet));"
		
		int row = 4; //(udp.getRowCount(sheet));
		int col = 2; //(udp.getColCount(sheet));	
		
		Object[][] data = new Object[row - 1][col];
		
		for (int r = 1; r < row; r++) {
			for(int c = 0; c < col; c++) {
				data[r-1][c] = udp.getCellDataString(r, c);
				System.out.print(udp.getCellDataString(r, c)+" ");
			}
			System.out.println();
		}
		return data;
	}
	public static void main(String[] args) {
		UserDataProvider udp = new UserDataProvider(file);
		int row = (udp.getRowCount(sheet));
		int col = (udp.getColCount(sheet));	
		for (int r = 1; r < row; r++) {
			for(int c = 0; c < col; c++) {
				System.out.print(udp.getCellDataString(r, c)+" ");
			}
			System.out.println();
		}
	}
	
	public UserDataProvider(String file) {
		UserDataProvider.file = file;
		try {
			workbook = new XSSFWorkbook(UserDataProvider.file);
		} catch (IOException e) {
			e.printStackTrace();
		}
		sheet = workbook.getSheet(sheetName);
	}
	public int getRowCount(XSSFSheet sheet) {
		return sheet.getPhysicalNumberOfRows();
	}
	public int getColCount(XSSFSheet sheet) {
		return sheet.getRow(0).getPhysicalNumberOfCells();
	}
	public String getCellDataString(int row, int col) {
		return UserDataProvider.sheet.getRow(row).getCell(col).getStringCellValue();	
	}
	public LocalDateTime getCellDataTime(int row, int col) {
		return UserDataProvider.sheet.getRow(row).getCell(col).getLocalDateTimeCellValue();	
	}
}




//  ******************* Following code is the test code where code will visit the website and login for to fill and check


package DataDriven;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.github.bonigarcia.wdm.WebDriverManager;

public class SauceDemoLogin {
	
	private WebDriver driver;
	
	@BeforeMethod
	public void setup() {
		WebDriverManager.chromedriver().setup();
		ChromeOptions options = new ChromeOptions();
		options.addArguments("--remote-allow-origins=*");
		this.driver = new ChromeDriver(options);
		this.driver.get("https://www.saucedemo.com/");
	}
	
	// *********** Here mentioned the Data Provider Name and the Class name
	
	@Test(dataProviderClass = UserDataProvider.class, dataProvider = "userData")
	public void LoginTest(String username, String password) throws InterruptedException {
		driver.findElement(By.id("user-name")).sendKeys(username);
		driver.findElement(By.id("password")).sendKeys(password);
		driver.findElement(By.id("login-button")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//*[@id=\"menu_button_container\"]/div/div[1]/div")).click();
		Thread.sleep(2000);
		String actualLogoutText = driver.findElement(By.id("logout_sidebar_link")).getText(); // Logout
		System.out.println("actualLogoutText : "+actualLogoutText);
		String expectedLogoutText = "Logout";
		Assert.assertEquals(actualLogoutText, expectedLogoutText);
	}
	
	@AfterMethod
	public void close() {
		driver.close();
	}

}










